package dropbox;

import java.util.Locale;

import com.dropbox.core.DbxAccountInfo;
import com.dropbox.core.DbxAppInfo;
import com.dropbox.core.DbxAuthFinish;
import com.dropbox.core.DbxClient;
import com.dropbox.core.DbxEntry;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.DbxWebAuthNoRedirect;

public class RESTDropbox {

  // Configuration
  private DbxAppInfo appInfo;
  private DbxRequestConfig config;

  // Authorisation
  DbxWebAuthNoRedirect webAuth;

  // Client
  DbxClient client;

  /**
   * Create a Dropbox instance with no access code. Use this constructor to set
   * up authentication with a new user.
   */
  public RESTDropbox() {
    appInfo = new DbxAppInfo(DoNotCommitToGitHub.APP_KEY,
        DoNotCommitToGitHub.APP_SECRET);
    config = new DbxRequestConfig(DoNotCommitToGitHub.APP_NAME, Locale
        .getDefault().toString());    
  }

  /**
   * Retrieve the link users authorise the app with.
   * 
   * @return String of the URL
   */
  public String getAuthorisationLink() {
    webAuth = new DbxWebAuthNoRedirect(config, appInfo);
    return webAuth.start();
  }

  /**
   * Given an authorisation code, generates a persistent access code to
   * authenticate the app.
   * 
   * @param authorisationCode
   *          - The response from the URL generated by getAuthorisationLink()
   * @return String of the access token
   */
  public String getAccessToken(String authorisationCode) {
    webAuth = new DbxWebAuthNoRedirect(config, appInfo);
    DbxAuthFinish authFinish;
    try {
      authFinish = webAuth.finish(authorisationCode);
    } catch (DbxException e) {
      System.err.println("Authorisation Failure: Dropbox reported an error.");
      return null;
    }

    return authFinish.accessToken;
  }

  /**
   * Given an access token sets up a client for dropbox operations.
   * 
   * @param accessToken
   *          - token allowing access to account.
   */
  private void setupClient(String accessToken) {
    client = new DbxClient(config, accessToken);
  }

  /**
   * Gets the account details, given an access token.
   * 
   * @param accessToken
   *          - token allowing access to account.
   * @return The account details.
   */
  public DbxAccountInfo getAccountDetails(String accessToken) {
    setupClient(accessToken);
    DbxAccountInfo info = null;
    try {
      info = client.getAccountInfo();
    } catch (DbxException e) {
      System.err
          .println("Error Printing Account Details: Dropbox reported an error.");
    }
    return info;
  }

  public DbxEntry.WithChildren getDirectory(String accessToken, String directory) {
    setupClient(accessToken);
    
    // Try to read directory
    DbxEntry.WithChildren listing = null;
    try {
      listing = client.getMetadataWithChildren(directory);
    } catch (DbxException e) {
      System.err.println("Could not read directory: " + directory);
    }
    
    return listing;
  }
  
}