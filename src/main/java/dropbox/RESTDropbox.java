package dropbox;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import com.dropbox.core.DbxAccountInfo;
import com.dropbox.core.DbxAppInfo;
import com.dropbox.core.DbxAuthFinish;
import com.dropbox.core.DbxClient;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.DbxSessionStore;
import com.dropbox.core.DbxStandardSessionStore;
import com.dropbox.core.DbxWebAuth;
import com.dropbox.core.DbxWebAuth.BadRequestException;
import com.dropbox.core.DbxWebAuth.BadStateException;
import com.dropbox.core.DbxWebAuth.CsrfException;
import com.dropbox.core.DbxWebAuth.NotApprovedException;
import com.dropbox.core.DbxWebAuth.ProviderException;
import com.dropbox.core.DbxWebAuthNoRedirect;
import com.dropbox.core.DbxWriteMode;

import storage.LocalStorage;

public class RESTDropbox {

  public static Logger LOG = Logger.getLogger(RESTDropbox.class);

  // Configuration
  private DbxAppInfo appInfo;
  private DbxRequestConfig config;

  /* Authorisation */
  private DbxWebAuth webAuth;
  private DbxWebAuthNoRedirect webAuthNoRedirect;
  private DbxSessionStore csrfTokenStore;

  // Client
  DbxClient client;

  /**
   * Create a Dropbox instance with no access code. Use this constructor to set
   * up authentication with a new user.
   */
  public RESTDropbox() {
    appInfo = new DbxAppInfo(DoNotCommitToGitHub.APP_KEY,
        DoNotCommitToGitHub.APP_SECRET);
    config = new DbxRequestConfig(DoNotCommitToGitHub.APP_NAME, Locale
        .getDefault().toString());
  }

  /**
   * Create a Dropbox instance with an access code. Use this constructor when
   * the user has previously granted access to their account.
   * 
   * @param accessToken
   */
  public RESTDropbox(String accessToken) {
    this();
    setupClient(accessToken);
  }

  /**
   * Retrieve the link to authenticate a user with this application.
   * 
   * NOTE: Only use this for command line applications. For Web Apps use the
   * getAuthorisationRedirect() version.
   * 
   * @return URL for the user
   */
  public String getAuthorisationLink() {
    webAuthNoRedirect = new DbxWebAuthNoRedirect(config, appInfo);
    return webAuthNoRedirect.start();
  }

  /**
   * Retrieves the access token which allows the application persistent access
   * to a user's Dropbox.
   * 
   * NOTE: Only use this for command line applications. For Web Apps use the
   * getAccessTokenRedirect() version.
   * 
   * @param authorisationCode
   *          - The response from the URL generated by getAuthorisationLink()
   * @return
   */
  public String getAccessToken(String authorisationCode) {
    webAuthNoRedirect = new DbxWebAuthNoRedirect(config, appInfo);
    DbxAuthFinish authFinish;
    try {
      authFinish = webAuthNoRedirect.finish(authorisationCode);
    } catch (DbxException e) {
      System.err.println("Authorisation Failure: Dropbox reported an error.");
      return null;
    }

    return authFinish.accessToken;
  }

  /**
   * Sets up a client for performing Dropbox download/upload operations.
   * 
   * @param accessToken
   *          - The persistent access token for the user.
   */
  private void setupClient(String accessToken) {
    client = new DbxClient(config, accessToken);
  }

  /**
   * Retrieves a user's Dropbox account details.
   * 
   * @return
   */
  public DbxAccountInfo getAccountDetails() {
    DbxAccountInfo info = null;
    try {
      info = client.getAccountInfo();
    } catch (DbxException e) {
      System.err
          .println("Error Printing Account Details: Dropbox reported an error.");
    }
    return info;
  }

  /**
   * Retrieves a user's Dropbox account details (formatted as JSON).
   * 
   * @return
   */
  public String getAccountDetailsAsJson() {
    DbxAccountInfo info = getAccountDetails();
    String result = "";
    result += "\"name\": \"" + info.displayName + "\",";
    result += "\"country\": \"" + info.country + "\",";
    result += "\"user_id\": \"" + info.userId + "\"";
    return "{" + result + "}";
  }

  /**
   * Uploads a file to Dropbox.
   * 
   * @param source
   *          - source file path e.g. "/home/user/image.jpg"
   * @param dest
   *          - destination file path e.g. "/images/image.jpg"
   */
  public void upload(String source, String dest) {
    System.err.println("Uploading " + source + " to " + dest);

    // Attempt to open file
    try {
      InputStream inputStream = LocalStorage.getFileInputStream(source);
      // Attempt to upload file
      client.uploadFile(dest, DbxWriteMode.add(),
      // " <-- Renames the file to (1) if it exists...
      // DbxWriteMode.force() <-- Blasts the file and starts again...
      // DbxWriteMode.update(String revisionToReplace) <-- Updates the file,
      // produces conflicted copy if changed since last pull...
          -1, inputStream);
      System.err.println("Upload Successful");
      LocalStorage.setInDropbox(source, dest);

    } catch (FileNotFoundException e) {
      System.err.println("File not found: " + source);
    } catch (SecurityException e) {
      System.err.println("Permission denied: " + source);
    } catch (DbxException e) {
      System.err.println("Upload Error: Dropbox returned an error.");
    } catch (IOException e) {
      System.err.println("Upload Error: Could not read file.");
    }
  }

  /**
   * Downloads a file from Dropbox
   * 
   * @param source
   *          - source file path e.g. "/images/image.jpg"
   * @param dest
   *          - destination file path e.g. "/home/user/image.jpg"
   */
  public void download(String source, String dest) {
    System.out.println("Downloading " + source + " to " + dest);
    try {
      OutputStream outputStream = LocalStorage.getFileOutputStream(dest);
      client.getFile(source, null, outputStream);
      System.out.println("Download Successful");
      LocalStorage.generateFileMetadata(dest, true, source);
    } catch (FileNotFoundException e) {
      System.err.println("File not found: " + dest);
    } catch (DbxException e) {
      System.err.println("Download Error: Dropbox reported an error.");
    } catch (IOException e) {
      System.err.println("Download Error: Could not read file.");
    }

  }

  /**
   * Returns the link to redirect the use to to authorise them with the app.
   * 
   * @param session
   *          - the HTTP Session. Why on earth does it need this?
   * @param sessionKey
   *          - not sure what this even is...
   * @param returnURI
   *          - Where the user is returned to after authenticating.
   * @return
   */
  public String getAuthorisationRedirect(HttpSession session,
      String sessionKey, String returnURI) {
    // Create a Token Store?
    csrfTokenStore = new DbxStandardSessionStore(session, sessionKey);
    // Create DbxWebAuth
    webAuth = new DbxWebAuth(config, appInfo, returnURI, csrfTokenStore);
    // Return the link to authorise
    return webAuth.start();
  }

  /**
   * Requests an Access Token from Dropbox given the response of the re-direct.
   * 
   * @param parameterMap
   *          - a map from String to String[] containing "state" and "code"
   *          where state is used for CSRF detection and code is the
   *          authentication code.
   * @return
   * @throws DbxException 
   * @throws ProviderException 
   * @throws NotApprovedException 
   * @throws CsrfException 
   * @throws BadStateException 
   * @throws BadRequestException 
   */
  public String getAccessTokenRedirect(Map<String, String[]> parameterMap) throws BadRequestException, BadStateException, CsrfException, NotApprovedException, ProviderException, DbxException {
      return webAuth.finish(parameterMap).accessToken;
  }
}
